import csv
from collections import defaultdict, Counter
from pyhtml import *
import matplotlib.pyplot as plt
from flask import Flask, render_template, request

app = Flask(__name__)


class Student:
    def __init__(self, ID):
        self.ID = ID
        self.marks = defaultdict(int)


courses = defaultdict(list)
student_db = {}
with open('data.csv', 'r') as f:
    reader = csv.reader(f, delimiter=',')
    line_count = 0
    for row in reader:
        if line_count == 0:
            line_count += 1
            continue
        if int(row[0]) not in student_db:
            student_db[int(row[0])] = Student(ID=int(row[0]))
        student_db[int(row[0])].marks[int(row[1])] = int(row[2])
        courses[int(row[1])].append(int(row[2]))

courses = dict(courses)


def gen_student_table(student: Student):
    student_table = [
        tr(
            th("Student id"),
            th("Course id"),
            th('Marks')
        ),
    ]
    total_marks = 0
    for k, v in student.marks.items():
        student_table.append(
            tr(
                td(student.ID),
                td(k),
                td(v)
            )
        )
        total_marks += v
    student_table.append(
        tr(
            td(colspan=2, style='text-align:center')("Total Marks"),
            td(total_marks)
        )
    )
    complete_table = table(border="2", id="student-details-table")(student_table)

    return str(complete_table)


def gen_course_table(course: str):
    global courses
    avg_marks = sum(courses[course]) / len(courses[course])
    max_marks = max(courses[course])
    course_table = [
        tr(
            td("Average Marks"),
            td("Maximum Marks"),
        ),
        tr(
            td(avg_marks),
            td(max_marks),
        ),
    ]
    return table(border="2", id="course-details-table")(course_table)


def gen_course_graph(course):
    global courses
    freq = dict(Counter(courses[course]))
    x_ax = list(freq.keys())
    y_ax = list(freq.values())
    plt.bar(x_ax, y_ax)
    plt.xlabel("Marks")
    plt.ylabel("Frequency")
    plt.savefig('static/img.png')


def course_content(course_id):
    gen_course_graph(course_id)
    course_out = str(gen_course_table(course_id)) + "\n" + str(img(src='static/img.png')) + "<br>"
    return course_out


#
def get_error_page():
    text_message = p("Something went wrong")
    return_link = a(href='/')("Go Back")
    error_response = str(text_message) + str(return_link)

    error_page = render_template('index.html.jinja',
                                 page_title='Something Went Wrong',
                                 page_heading='Wrong Inputs',
                                 default_page=False,
                                 body_content=error_response
                                 )
    return error_page


@app.errorhandler(400)
def page_not_found(e):
    return get_error_page(), 500


@app.route('/', methods=['GET', 'POST'])
def home_page():
    global student_db, courses
    return_link = a(href='/')("Go Back")

    if request.method == 'POST':
        generated_response = None
        if request.form['ID'] in ['course_id', 'student_id'] and request.form['id_value'].isnumeric():
            query_id = int(request.form['id_value'])
            if request.form['ID'] == 'course_id':
                if query_id not in courses:
                    return get_error_page()
                return render_template('index.html.jinja',
                                       page_title='Course Data',
                                       page_heading='Course Details',
                                       default_page=False,
                                       body_content=course_content(query_id) + str(return_link)
                                       )
            elif request.form['ID'] == 'student_id':
                if query_id not in student_db:
                    return get_error_page()
                return render_template('index.html.jinja',
                                       page_title='Student Data',
                                       page_heading='Student Details',
                                       default_page=False,
                                       body_content=gen_student_table(student_db[query_id]) + str(return_link)
                                       )
        else:
            return get_error_page()
    return render_template('index.html.jinja', page_title='Enter Details', page_heading='Enter the details',
                           default_page=True, body_content="")


if __name__ == '__main__':
    app.run()
